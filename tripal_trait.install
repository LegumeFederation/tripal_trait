<?php
/**
 * @file
 * Installation of the Tripal Trait module
 */

/**
 * Implements hook_disable().
 *
 * Perform actions when the module is disabled by the site administrator
 *
 * @ingroup tripal_trait
 */
function tripal_trait_disable() {

  // EXPLANATION: If you are using Drupal Views you want to ensure that any
  // default views that your module provides are disabled when the module is
  // disabled. Default views are specified in the
  // [module name].views.default.inc file. The following code will disable these
  // views. If your module does not create any default views you can remove the
  // following code.

  // Disable all default views provided by this module
  require_once("tripal_trait.views_default.inc");
  $views = tripal_trait_views_default_views();
  foreach (array_keys($views) as $view_name) {
    tripal_disable_view($view_name,FALSE,array('suppress_error' => TRUE));
  }
}

/**
 * Implements hook_requirements().
 *
 * Performs check to see if all required dependencies are met. Drupal will
 * automatically check for module dependencies but here you can check for other
 * requirements.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_requirements($phase) {

  $requirements = array();
  if ($phase == 'install') {
    // EXPLANATION: It is essential that Chado be installed for almost all
    // Tripal modules. Therefore, the following code checks to ensure Chado is
    // installed and available. If your module does not require that Chado be
    // installed, you can remove the following check.

    // make sure chado is installed
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements ['tripal_trait'] = array(
          'title' => "tripal_trait",
          'value' => "ERROR: Chado must be installed before this module can be enabled",
          'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 *
 * Performs actions when the modules is first installed.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_install() {

  // EXPLANATION: Here is a good place to add any materialized views, controlled
  // vocabularies CV, databases or CV terms needed by your module.
  // To keep this module code short, create functions to do each of those tasks

  // add any materialized view
  tripal_trait_add_mviews();

  // add any external databases used by the example module.
  tripal_trait_add_dbs();

  // add any controlled vocabularies used by the example module. You may need
  // to add a vocabulary if you to set it as default (see next lines of code).
  // For example, the Sequence Ontology (SO) is used by the feature module as
  // the default vocabulary for the feature type_id field. But, that vocabulary
  // does not yet exist in Chado until after the SO is loaded using the Tripal
  // OBO loader. But, we can add it here as a place-holder so that we can then
  // set it as a default vocabulary (see below).
  tripal_trait_add_cvs();


  // add any controlled vocabulary terms
  tripal_trait_add_cvterms();

  // EXPLANATION: Many tables in Chado have a 'type_id' column which allows for
  // association of controlled vocabularies to describe the record. Chado places
  // no restrictions on which vocabularies can be used, but Tripal can be
  // instructed to provide a default vocabulary for any given field. For
  // example, the feature.type_id column will typically use the Sequence
  // Ontology. In that case, we can use the tripal_set_default_cv() function to
  // specify the Sequence Ontology (sequence) as the default vocabulary.
//  tripal_set_default_cv('example', 'type_id', 'example_type');

  // add any custom tables. For this case we will add an 'example' table to the
  // chado schema
  tripal_trait_add_custom_tables();
}


/**
 * Implements hook_uninstall().
 *
 * Performs actions when the modules is uninstalled.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_uninstall() {
  // drop tables created in tripal_trait_add_custom_tables()
  // remove cvs created in tripal_trait_add_cvs()?
}

/**
 * Creates a materialized view that stores the type & number of examples per
 * organism.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_mviews() {

  // EXPLANATION: use the tripal_add_mview() function to add a materialized view
  // needed by your module. If you have more than one materialized view it is
  // best to create a single function for each one and call each function here.
  // Otherwise this function can become quite long.
  
  // MViews for QTL, maps, markers et cetera will go here.
}

/**
 * Add cvs related to traits, maps and markers
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_dbs() {
  // EXPLANATION: use the tripal_insert_db() function to add any external
  // databases needed by your module. If the database already exists then the
  // function will gracefully return.

  tripal_insert_db(array(
    'name' => 'DOI',
    'description' => 'Document Object Identifier',
    'url' => 'http://www.doi.org/',
    'urlprefix' => 'http://dx.doi.org/',
  ));
  tripal_insert_db(array(
    'name' => 'PMID',
    'description' => 'PubMed ID',
    'url' => 'http://www.ncbi.nlm.nih.gov/pubmed/',
    'urlprefix' => 'http://www.ncbi.nlm.nih.gov/pubmed/',
  ));
  tripal_insert_db(array(
    'name' => 'Tripal Trait Data Dictionary',
    'description' => 'Tripal Trait Data Dictionary',
    'url' => '',
    'urlprefix' => '',
  ));
  
}

/**
 * Add cvs related to traits, maps and markers
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_cvs() {

  // EXPLANATION: use the tripal_insert_cv() function to add any controlled
  // vocabularies needed by your module. If the vocabulary already exists then
  // the function will gracefully return. Chado conventions use a singular name
  // for CV names (not plural).

  tripal_insert_cv(
    'tripal_trait_dictionary',
    'Contains field names and type for the Tripal Trait module'
  );
}

/**
 * Adds controlled vocabulary terms needed by this module.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_cvterms() {

  // EXPLANATION: for our test module to work we need to add some terms to our
  // example_type controlled vocabulary. Ideally we should have a full OBO file
  // for loading but sometimes we just have a small list that won't really
  // change so we can add those terms here.

  // Add loading of the the tripal trait ontology to the job queue.
  $obo_path = '{tripal_trait}/files/tripal_trait.obo';
  $obo_id = tripal_insert_obo('Tripal Trait Data Dictionary', $obo_path);
  tripal_submit_obo_job(array('obo_id' => $obo_id));
}

/**
 * Add custom tables to Chado that are required by this module
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_custom_tables() {

  // EXPLANATION: for this example module we will create a set of example tables
  // that mimic Chado tables. These tables are:
  //
  //   1) example     (for storing the primary example records)
  //   2) exampleprop (for sorting properties about the example)
  //   3) example_relationship (for storing relationships about examples)
  //   4) example_dbxref (for storing cross-references about an example)
  //
  // To make the code easier to read, each table is created by a separate
  // function called here:

  tripal_trait_add_featurelocprop_table();
  tripal_trait_add_featuremap_stock_table();
  tripal_trait_add_featureposprop_table();
  tripal_trait_add_stock_organism_table();
  tripal_trait_add_stock_eimage_table();
  tripal_trait_add_featuremap_contact_table();
  tripal_trait_add_stockcollection_db_table();
  tripal_trait_add_eimage_pub_table();
  tripal_trait_add_feature_stock_table();
  tripal_trait_add_contactprop_table();
}

/**
 * Adds the 'featurelocprop' custom table to Chado.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_featurelocprop_table() {
  // Use the Drupal Schema API to describe the custom table.
  $schema = array(
    'table' => 'featurelocprop',
    'fields' => array(
      'featurelocprop_id' => array(
        'type' => 'serial',
        'not null' => true,
      ),
      'featureloc_id' => array(
        'type' => 'int',
        'not null' => true,
      ),
      'type_id' => array(
        'type' => 'int',
        'not null' => true,
      ),
      'value' => array(
        'type' => 'text',
      ),
      'rank' => array(
        'type' => 'int',
        'not null' => true,
      ),
    ),
    'primary key' => array(
      0 => 'featurelocprop_id',
    ),
    'unique keys' => array(
      'featurelocprop_uk1' => array(
        0 => 'featureloc_id',
        1 => 'type_id',
        2 => 'rank',
      ),
    ),
    'foreign keys' => array(
      'cvterm' => array(
        'table' => 'cvterm',
        'columns' => array(
          'type_id' => 'cvterm_id',
        ),
      ),
      'featureloc_id' => array(
        'table' => 'featureloc',
        'columns' => array(
          'featureloc_id' => 'featureloc_id',
        ),
      ),
    ),
  );
  
  chado_create_custom_table('featurelocprop', $schema, TRUE);
}

/**
 * Adds the 'featuremap_stock' custom linker table to Chado.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_featuremap_stock_table() {
  // Use the Drupal Schema API to describe the custom table.
  $schema =  array(
    'table' => 'featuremap_stock',
    'fields' => array(
      'featuremap_stock_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'featuremap_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array(
      0 => 'featuremap_stock_id',
    ),
    'unique keys' => array(
      'featuremap_stock_uk1' => array(
        0 => 'featuremap_id',
        1 => 'stock_id',
      ),
    ),
    'foreign keys' => array(
      'featuremap' => array(
        'table' => 'featuremap',
        'columns' => array(
          'featuremap_id' => 'featuremap_id',
        ),
      ),
      'stock' => array(
        'table' => 'stock',
        'columns' => array(
          'stock_id' => 'stock_id',
        ),
      ),
    ),
  );
  
  chado_create_custom_table('featuremap_stock', $schema, TRUE);
}

/**
 * Adds the 'featureposprop' custom table to Chado.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_featureposprop_table() {
  // Use the Drupal Schema API to describe the custom table.
  $schema =  array(
    'table' => 'featureposprop',
    'fields' => array(
      'featureposprop_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'featurepos_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'value' => array(
        'type' => 'text',
        'not null' => FALSE,
      ),
      'rank' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array(
      0 => 'featureposprop_id',
    ),
    'unique keys' => array(
      'featureposprop_uk1' => array(
        0 => 'featurepos_id',
        1 => 'type_id',
        2 => 'rank',
      ),
    ),
    'foreign keys' => array(
      'cvterm' => array(
        'table' => 'cvterm',
        'columns' => array(
          'type_id' => 'cvterm_id',
        ),
      ),
      'featurepos' => array(
        'table' => 'featurepos',
        'columns' => array(
          'featurepos_id' => 'featurepos_id',
        ),
      ),
    ),
  );
  
  chado_create_custom_table('featureposprop', $schema, TRUE);
}

/**
 * Adds the 'stock_organism' custom linker table to Chado.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_stock_organism_table() {
  // Use the Drupal Schema API to describe the custom table.
  $schema =  array(
    'table' => 'stock_organism',
    'fields' => array(
      'stock_organism_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'organism_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'rank' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array(
      0 => 'stock_organism_id',
    ),
    'unique keys' => array(
      'stock_organism_uk1' => array(
        0 => 'stock_id',
        1 => 'organism_id',
        2 => 'rank',
      ),
    ),
    'foreign keys' => array(
      'stock' => array(
        'table' => 'stock',
        'columns' => array(
          'stock_id' => 'stock_id',
        ),
      ),
      'organism' => array(
        'table' => 'organism',
        'columns' => array(
          'organism_id' => 'organism_id',
        ),
      ),
    ),
  );
  
  chado_create_custom_table('stock_organism', $schema, TRUE);
}

/**
 * Adds the 'stock_eimage' custom linker table to Chado.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_stock_eimage_table() {

  // Use the Drupal Schema API to describe the custom table.
  $schema =  array(
    'table' => 'stock_eimage',
    'fields' => array(
      'stock_eimage_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'eimage_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'rank' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array(
      0 => 'stock_eimage_id',
    ),
    'unique keys' => array(
      'stock_eimage_uk1' => array(
        0 => 'stock_id',
        1 => 'eimage_id',
        2 => 'rank',
      ),
    ),
    'foreign keys' => array(
      'stock' => array(
        'table' => 'stock',
        'columns' => array(
          'stock_id' => 'stock_id',
        ),
      ),
      'eimage' => array(
        'table' => 'eimage',
        'columns' => array(
          'eimage_id' => 'eimage_id',
        ),
      ),
    ),
  );
  
  chado_create_custom_table('stock_eimage', $schema, TRUE);
}

/**
 * Adds the 'featuremap_contact' custom linker table to Chado.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_featuremap_contact_table() {

  // Use the Drupal Schema API to describe the custom table.
  $schema =  array(
    'table' => 'featuremap_contact',
    'fields' => array(
      'featuremap_contact_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'featuremap_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'contact_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'rank' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array(
      0 => 'featuremap_contact_id',
    ),
    'unique keys' => array(
      'featuremap_contact_uk1' => array(
        0 => 'featuremap_id',
        1 => 'contact_id',
        2 => 'rank',
      ),
    ),
    'foreign keys' => array(
      'featuremap' => array(
        'table' => 'featuremap',
        'columns' => array(
          'featuremap_id' => 'featuremap_id',
        ),
      ),
      'contact' => array(
        'table' => 'contact',
        'columns' => array(
          'contact_id' => 'contact_id',
        ),
      ),
    ),
  );
  
  chado_create_custom_table('featuremap_contact', $schema, TRUE);
}

/**
 * Adds the 'stockcollection_db' custom linker table to Chado.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_stockcollection_db_table() {

  // Use the Drupal Schema API to describe the custom table.
  $schema =  array(
    'table' => 'stockcollection_db',
    'fields' => array(
      'stockcollection_db_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'stockcollection_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'db_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'rank' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array(
      0 => 'stockcollection_db_id',
    ),
    'unique keys' => array(
      'stockcollection_db_uk1' => array(
        0 => 'stockcollection_id',
        1 => 'db_id',
        2 => 'rank',
      ),
    ),
    'foreign keys' => array(
      'stockcollection' => array(
        'table' => 'stockcollection',
        'columns' => array(
          'stockcollection_id' => 'stockcollection_id',
        ),
      ),
      'db' => array(
        'table' => 'db',
        'columns' => array(
          'db_id' => 'db_id',
        ),
      ),
    ),
  );
  chado_create_custom_table('stockcollection_db', $schema, TRUE);
}

/**
 * Adds the 'eimage_pub' custom linker table to Chado.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_eimage_pub_table() {

  // Use the Drupal Schema API to describe the custom table.
  $schema =  array(
    'table' => 'eimage_pub',
    'fields' => array(
      'eimage_pub_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'eimage_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'pub_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'rank' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array(
      0 => 'eimage_pub_id',
    ),
    'unique keys' => array(
      'eimage_pub_uk1' => array(
        0 => 'eimage_id',
        1 => 'pub_id',
        2 => 'rank',
      ),
    ),
    'foreign keys' => array(
      'eimage' => array(
        'table' => 'eimage',
        'columns' => array(
          'eimage_id' => 'eimage_id',
        ),
      ),
      'pub' => array(
        'table' => 'pub',
        'columns' => array(
          'pub_id' => 'pub_id',
        ),
      ),
    ),
  );
  chado_create_custom_table('eimage_pub', $schema, TRUE);
}

/**
 * Adds the 'feature_stock' custom linker table to Chado.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_feature_stock_table() {

  // Use the Drupal Schema API to describe the custom table.
  $schema =  array(
    'table' => 'feature_stock',
    'fields' => array(
      'feature_stock_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'feature_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'rank' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array(
      0 => 'feature_stock_id',
    ),
    'unique keys' => array(
      'feature_stock_uk1' => array(
        0 => 'feature_id',
        1 => 'stock_id',
        2 => 'rank',
      ),
    ),
    'foreign keys' => array(
      'feature' => array(
        'table' => 'feature',
        'columns' => array(
          'feature_id' => 'feature_id',
        ),
      ),
      'stock' => array(
        'table' => 'stock',
        'columns' => array(
          'stock_id' => 'stock_id',
        ),
      ),
    ),
  );
  chado_create_custom_table('feature_stock', $schema, TRUE);
}

/**
 * Adds the 'tripal_trait_add_contactprop_table' custom table to Chado.
 *
 * @ingroup tripal_trait
 */
function tripal_trait_add_contactprop_table() {

  // Use the Drupal Schema API to describe the custom table.
  $schema =  array(
    'table' => 'contactprop',
    'fields' => array(
      'contactprop_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'contact_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'value' => array(
        'type' => 'text',
        'not null' => FALSE,
      ),
      'rank' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array(
      0 => 'contactprop_id',
    ),
    'unique keys' => array(
      'contactprop_uk1' => array(
        0 => 'contact_id',
        1 => 'type_id',
        2 => 'rank',
      ),
    ),
    'foreign keys' => array(
      'contact' => array(
        'table' => 'feature',
        'columns' => array(
          'feature_id' => 'feature_id',
        ),
      ),
      'cvterm' => array(
        'table' => 'cvterm',
        'columns' => array(
          'type_id' => 'cvterm_id',
        ),
      ),
    ),
  );
  chado_create_custom_table('contactprop', $schema, TRUE);
}

/**
 * This is the required update for tripal_trait.
 */
function tripal_trait_update_7200() {
  // EXPLANATION: as you create new releases of your module you may find that
  // tables your module created, or data may need to be adjusted. This function
  // allows you to do that. This function is executed using the
  // http://[your site]/update.php  URL or using the drush command 'updatedb'.
  // This function should be named according to the instructions provided here:
  // https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_update_N/7
  //
  // It is best not to use Tripal API calls inside of this function because an
  // upgrade from Drupal 6 to Drupal 7 requires that all modules be disabled
  // which means the Tripal API is not available. This is an unfortunate
  // requirement, but will prevent errors during a major upgrade.

  // it is good to wrap any database changes inside of a try catch block:
  try {
   // perform database changes
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not apply updates: '. $error);
  }
}

/**
 * Implementation of hook_update_dependencies(). It specifies a list of other
 * modules whose updates must be run prior to this one.
 */
function tripal_trait_update_dependencies() {
  $dependencies = array();

  // EXPLANATION: here we can specify which modules must be updated prior to
  // applying the updates in this module. This is useful because it prevents
  // updates from being executed out of order. The following example code shows
  // that the 'tripal_trait' module update number 7200 must be executed after
  // the 'tripal_cv' module's 7200 update.
  $dependencies['tripal_trait'][7200] = array(
    'tripal_cv' => 7200
  );

  return $dependencies;
}
